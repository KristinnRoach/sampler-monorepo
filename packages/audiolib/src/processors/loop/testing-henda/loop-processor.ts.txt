// loop-processor.ts

import { AudioParamDescriptor } from '@/types/types';

interface LoopProcessorConfig {
  type: 'config';
  updateThreshold?: number;
}

interface LoopProcessorUpdate {
  type: 'update';
  loopStart: number;
  loopEnd: number;
}

class LoopProcessor extends AudioWorkletProcessor {
  private lastLoopStart: number = 0;
  private lastLoopEnd: number = 1;
  private updateThreshold: number = 0.0009556; // Threshold for reporting changes (C6 in ms)

  static get parameterDescriptors(): AudioParamDescriptor[] {
    return [
      {
        name: 'loopStart',
        defaultValue: 0,
        minValue: 0,
        maxValue: 1000,
        automationRate: 'k-rate',
      },
      {
        name: 'loopEnd',
        defaultValue: 1,
        minValue: 0,
        maxValue: 1000,
        automationRate: 'k-rate',
      },
    ];
  }

  constructor() {
    super();
    this.port.onmessage = this.handleMessage.bind(this);
  }

  private handleMessage(event: MessageEvent<LoopProcessorConfig>): void {
    const data = event.data;
    if (data.type === 'config' && data.updateThreshold !== undefined) {
      this.updateThreshold = data.updateThreshold;
    }
  }

  process(
    _inputs: Float32Array[][],
    _outputs: Float32Array[][],
    parameters: Record<string, Float32Array>
  ): boolean {
    const loopStart = parameters.loopStart[0] ?? 0;
    const loopEnd = parameters.loopEnd[0] ?? 1;

    // Calculate loop duration (reserved for future use)
    // const loopDuration = loopEnd - loopStart;

    // Compare with threshold to avoid flooding with tiny changes
    const startDiff = Math.abs(loopStart - this.lastLoopStart);
    const endDiff = Math.abs(loopEnd - this.lastLoopEnd);

    if (startDiff > this.updateThreshold || endDiff > this.updateThreshold) {
      this.port.postMessage({
        type: 'update',
        loopStart,
        loopEnd,
      } as LoopProcessorUpdate);

      // Update last values
      this.lastLoopStart = loopStart;
      this.lastLoopEnd = loopEnd;
    }

    return true; // Keep the processor alive
  }
}

// Register the processor
registerProcessor('loop-processor', LoopProcessor);

// Import type definitions for AudioWorkletProcessor (if not globally available)
// declare const registerProcessor: (name: string, processorCtor: typeof AudioWorkletProcessor) => void;
