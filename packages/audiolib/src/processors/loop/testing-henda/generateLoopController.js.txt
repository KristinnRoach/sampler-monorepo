import { generateProcessorCode } from '@/utils/generateProcessorCode';
import { registry } from '@/store/ProcessorRegistry';

// Define the parameters
const params = [
  {
    name: 'loopStart',
    defaultValue: 0,
    minValue: 0,
    maxValue: 1000,
    automationRate: 'k-rate',
  },
  {
    name: 'loopEnd',
    defaultValue: 1,
    minValue: 0,
    maxValue: 1000,
    automationRate: 'k-rate',
  },
];

// Define the process function
const processFunc = function () {
  const loopStart = parameters.loopStart[0];
  const loopEnd = parameters.loopEnd[0];

  // Store loop duration
  const loopDuration = loopEnd - loopStart;

  // Compare with threshold to avoid flooding with tiny changes
  const startDiff = Math.abs(loopStart - this.lastLoopStart);
  const endDiff = Math.abs(loopEnd - this.lastLoopEnd);

  if (startDiff > this.updateThreshold || endDiff > this.updateThreshold) {
    this.port.postMessage({
      type: 'update',
      loopStart: loopStart,
      loopEnd: loopEnd,
    });

    // Update last values
    this.lastLoopStart = loopStart;
    this.lastLoopEnd = loopEnd;
  }

  return true; // Keep the processor alive
};

// Define constructor code
const constructorCode = function () {
  this.lastLoopStart = 0;
  this.lastLoopEnd = 1;
  this.updateThreshold = 0.0009556; // Threshold for reporting changes
};

// Define message handler
const messageHandler = function (event) {
  if (event.data && event.data.type === 'config') {
    if (event.data.updateThreshold !== undefined) {
      this.updateThreshold = event.data.updateThreshold;
    }
  }
};

// Generate the processor code
const processorCode = generateProcessorCode(
  { className: 'LoopControlProcessor', registryName: 'loop-control-processor' },
  processFunc,
  params,
  {
    state: {
      lastLoopStart: 0,
      lastLoopEnd: 1,
      updateThreshold: 0.0009556,
    },
    constructorCode,
    messageHandler,
  }
);

// Create a Blob from the processor code
const blob = new Blob([processorCode], { type: 'application/javascript' });
const objectUrl = URL.createObjectURL(blob);

// Function to create and return the AudioWorkletNode
async function generateLoopController(audioContext) {
  // Load the processor
  // await audioContext.audioWorklet.addModule(objectUrl);
  registry.register('loop-control-processor', objectUrl);
  // Create and return the node
  return new AudioWorkletNode(audioContext, 'loop-control-processor');
}

export { generateLoopProcessor };
