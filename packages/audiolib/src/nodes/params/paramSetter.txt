// // debouncedParamSetter.ts
// import { debounce } from '@/utils/Debouncer';
// import { localStore } from '@/storage/local';

// type ParamSetter = (value: number) => void;

// export function createDebouncedParamSetter(
//   paramName: string,
//   setParam: ParamSetter,
//   options?: {
//     debounceMs?: number;
//     storageKey?: string;
//     onPersist?: (value: number) => void;
//   }
// ) {
//   const {
//     debounceMs = 120,
//     storageKey = `audioParam_${paramName}`,
//     onPersist,
//   } = options || {};

//   // Debounced function to persist to localStorage
//   const persist = debounce((value: number) => {
//     localStore.saveValue(storageKey, value);
//     if (onPersist) onPersist(value);
//   }, debounceMs);

//   // Main function to be called by UI
//   return (value: number) => {
//     setParam(value); // Apply to AudioParam (with smoothing, etc.)
//     persist(value); // Debounced persistence
//   };
// }
