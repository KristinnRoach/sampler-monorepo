
// import { LibParamDescriptor } from '@/nodes/params/param-types';

// // Define descriptors for voice parameters
// export const SAMPLE_VOICE_PARAM_DESCRIPTORS: Record<
//   string,
//   LibParamDescriptor
// > = {
//   playbackRate: {
//     nodeId: 'playbackRate',
//     name: 'playbackRate',
//     dataType: 'number',
//     minValue: 0.1,
//     maxValue: 10,
//     defaultValue: 0,
//     group: 'playback',
//     automationRate: 'k-rate',
//   },
//   envGain: {
//     nodeId: 'envGain',
//     name: 'envGain',
//     dataType: 'number',
//     minValue: 0,
//     maxValue: 1,
//     defaultValue: 1,
//     group: 'envelope',
//     automationRate: 'k-rate',
//   },
//   startPoint: {
//     nodeId: 'startPoint',
//     name: 'startPoint',
//     dataType: 'number',
//     minValue: 0,
//     maxValue: 1,
//     defaultValue: 0,
//     group: 'playback',
//     automationRate: 'k-rate',
//   },
//   endPoint: {
//     nodeId: 'endPoint',
//     name: 'endPoint',
//     dataType: 'number',
//     minValue: 0,
//     maxValue: 1,
//     defaultValue: 1,
//     group: 'playback',
//     automationRate: 'k-rate',
//   },
//   loopStart: {
//     nodeId: 'loopStart',
//     name: 'loopStart',
//     dataType: 'number',
//     minValue: 0,
//     defaultValue: 0,
//     group: 'loop',
//     automationRate: 'k-rate',
//   },
//   loopEnd: {
//     nodeId: 'loopEnd',
//     name: 'loopEnd',
//     dataType: 'number',
//     minValue: 0,
//     defaultValue: 1,
//     group: 'loop',
//     automationRate: 'k-rate',
//   },
//   velocity: {
//     nodeId: 'velocity',
//     name: 'velocity',
//     dataType: 'number',
//     minValue: 0,
//     maxValue: 127,
//     defaultValue: 64,
//     group: 'voice',
//     automationRate: 'k-rate',
//   },
// };

// getParamDescriptors(): Record<string, LibParamDescriptor> {
//   return SAMPLE_VOICE_PARAM_DESCRIPTORS;
// }

// #updateEnvelopeDuration(startNorm: number, endNorm: number): void {
//   if (this.sampleDuration <= 0) return;
//   // const startPoint = this.getParam('startPoint')?.value ?? 0;
//   // const endPoint = this.getParam('endPoint')?.value ?? 1;x
//   // const playbackRate = this.getParam('playbackRate')?.value ?? 1;

//   // Calculate effective duration based on start/end points and playback rate
//   const effectiveDuration = (endNorm - startNorm) * this.sampleDuration; // / playbackRate;

//   this.#ampEnvelope.duration = Math.max(0.001, effectiveDuration);
// }
