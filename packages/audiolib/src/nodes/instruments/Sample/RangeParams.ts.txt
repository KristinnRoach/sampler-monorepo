import { AudioParamController, ValueSnapper } from '@/nodes/params';

export class RangeParam {
  startParam: AudioParam;
  endParam: AudioParam;

  #constantSignal: ConstantSourceNode;
  #targets: Array<{ param: AudioParam; scaler?: GainNode }> = [];

  #snapper: ValueSnapper;

  constructor(
    context: AudioContext,
    params: { start: AudioParam; end: AudioParam },
    snapper: ValueSnapper,
    initialValue: number
  ) {
    this.startParam = params.start;
    this.endParam = params.end;
    this.#snapper = snapper; // new ValueSnapper();

    this.#constantSignal = context.createConstantSource();
    this.#constantSignal.start();

    this.#constantSignal.offset.setValueAtTime(
      initialValue,
      context.currentTime
    );
  }

  addTarget(targetParam: AudioParam, scaleFactor: number = 1): this {
    if (scaleFactor === 1) {
      this.#constantSignal.connect(targetParam);
      this.#targets.push({ param: targetParam });
    } else {
      const scaler = new GainNode(this.#context, { gain: scaleFactor });
      this.#constantSignal.connect(scaler);
      scaler.connect(targetParam);
      this.#targets.push({ param: targetParam, scaler });
    }
    return this;
  }

  ramp(
    targetValue: number,
    duration: number,
    timestamp: number,
    method: 'exponential' | 'linear' = 'exponential',
    cancelScheduled = true
  ): this {
    const currentValue = this.param.value;

    if (cancelScheduled) this.param.cancelScheduledValues(timestamp); // cancelScheduledParamValues(this.param, now);
    this.param.setValueAtTime(currentValue, timestamp);

    if (method === 'exponential') {
      const safeValue = Math.max(
        targetValue,
        AudioParamController.MIN_EXPONENTIAL_RAMP_VALUE
      );
      this.param.exponentialRampToValueAtTime(safeValue, timestamp + duration);
    } else {
      this.param.linearRampToValueAtTime(targetValue, timestamp + duration);
    }

    return this;
  }

  setValue(value: number, timestamp: number, cancelScheduled = true): this {
    if (cancelScheduled) this.param.cancelScheduledValues(timestamp);

    this.param.setValueAtTime(value, timestamp);
    return this;
  }

  get param(): AudioParam {
    return this.#constantSignal.offset;
  }

  get value(): number {
    return this.param.value;
  }
}
