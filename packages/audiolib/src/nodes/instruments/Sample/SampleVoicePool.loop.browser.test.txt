// Minimal Vitest browser test for stuck notes when loop is enabled
import { describe, it, expect, beforeAll } from 'vitest';
import { SampleVoicePool } from './SampleVoicePool';

const createAudioContext = () => new AudioContext();

describe('SampleVoicePool loop stuck notes', () => {
  let pool: SampleVoicePool;
  let context: AudioContext;

  beforeAll(async () => {
    context = createAudioContext();
    pool = new SampleVoicePool(context, 2); // minimal polyphony
    await pool.init();
    // Use a dummy buffer (1s, 1 channel)
    const buffer = context.createBuffer(
      1,
      context.sampleRate,
      context.sampleRate
    );
    pool.setBuffer(buffer);
    // If you want to test loop, you may need to set loop on voices directly:
    pool.allVoices.forEach((v) => v.setLoopEnabled(true));
  });

  it('should release all notes when allNotesOff is called with loop enabled', () => {
    // Play two notes
    pool.noteOn(60, 100);
    pool.noteOn(62, 100);
    // Release all notes
    pool.allNotesOff(0.1);
    // Check that no voices are stuck in playing state
    expect(pool.playingVoicesCount).toBe(0);
    expect(pool.releasingVoicesCount).toBe(0);
  });
});
