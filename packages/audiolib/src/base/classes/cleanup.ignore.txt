
export async function generateWorkletNode(
  audioContext: BaseAudioContext,
  processorName: string,
  processFunction?: Function,
  params: AudioParamDescriptor[] = [],
  nodeOptions = {},
  processorOptions = {}
): Promise<BaseWorkletNode> {
  // Register or get existing processor
  if (processFunction) {
    // register is a no-op if already registered
    await registry.register(audioContext, processorName, {
      processFunction,
      processorParams: params,
      processorOptions: processorOptions,
    });
  } else {
    // todo: check if this works (should still register without processFunction, otherwise remove the else)
    await registry.register(audioContext, processorName);
  }

  // Create and return node
  const { registryName } = getStandardizedAWPNames(processorName);
  return new BaseWorkletNode(audioContext, registryName, nodeOptions);
}


