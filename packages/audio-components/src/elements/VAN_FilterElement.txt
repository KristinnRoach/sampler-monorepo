import van from '@repo/vanjs-core';
import { define } from '@repo/vanjs-core/element';
import { SamplePlayer } from '@repo/audiolib';

const { div, input, label, span } = van.tags;

const RangePicker = (
  min: number,
  max: number,
  value: any // State<number>
) =>
  input({
    type: 'range',
    min,
    max,
    value,
    oninput: (e) => (value.val = e.target.value),
  });

define(
  'filter-element',
  ({ attr, $this }) => {
    // Get the target sampler from the 'for' attribute
    const targetId = attr('for', '').val;

    // Default values based on SamplePlayer's defaults
    const minFreq = Number(attr('min', '10').val);
    const maxFreq = Number(attr('max', '20000').val);
    const defaultLpfFreq = Number(attr('default-lpf', '20000').val);
    const defaultHpfFreq = Number(attr('default-hpf', '60').val);

    // State for the frequency values
    const lpfFrequency = van.state(defaultLpfFreq);
    const hpfFrequency = van.state(defaultHpfFreq);

    // Find the target sampler element
    const findTarget = () => {
      if (!targetId) return null;
      return document.getElementById(targetId) as any;
    };

    // Update the filter frequencies when the slider changes
    const updateFilters = () => {
      const target = findTarget();
      if (!target?.samplePlayer) return;

      const player = target.samplePlayer as SamplePlayer;
      player.setParameterValue('lpf-freq', lpfFrequency.val);
      player.setParameterValue('hpf-freq', hpfFrequency.val);
    };

    // Update filters when frequencies change
    van.derive(() => {
      updateFilters();
    });

    // Handle range change from the two-thumb slider
    const handleRangeChange = (e: CustomEvent) => {
      hpfFrequency.val = e.detail.min;
      lpfFrequency.val = e.detail.max;
    };

    return div(
      { class: 'filter-control' },
      div(
        { class: 'filter-header' },
        span({ class: 'filter-title' }, 'Frequency Filters')
      ),
      div(
        { class: 'filter-body' },
        div(
          { class: 'filter-values' },
          span(
            { class: 'hpf-value' },
            'HPF: ',
            span(
              { class: 'freq-value' },
              () => `${Math.round(hpfFrequency.val)} Hz`
            )
          ),
          span(
            { class: 'lpf-value' },
            'LPF: ',
            span(
              { class: 'freq-value' },
              () => `${Math.round(lpfFrequency.val)} Hz`
            )
          ),
          div(
            'Hpf: ',
            RangePicker(0, 20000, hpfFrequency),
            () => ` ${hpfFrequency.val}Hz`
          ),
          div(
            'Lpf: ',
            RangePicker(10, 20000, lpfFrequency),
            () => ` ${lpfFrequency.val}Hz`
          )
        )
      )
    );
  },
  false
);
