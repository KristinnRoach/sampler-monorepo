import getDefaultPlayer from './defaultSSPlayer';
// import { defaultSampleUrl } from '../utils/repoPaths';
import { Handle, Position, type NodeProps } from '@xyflow/react'; // useNodesData
import { type SamplePlayerNode } from './types';
import { useEffect, useState } from 'react';
import { type SingleSamplePlayer } from '@repo/audiolib';

const defaultSampleUrl = '/sus.wav'; // temp
// const defaultSampleUrl = new URL('/sus.wav', window.location.origin).href;

async function fetchSample(url: string): Promise<ArrayBuffer> {
  const response = await fetch(url);
  if (!response.ok) {
    throw new Error(`Network response was not ok: ${response.statusText}`);
  }
  return response.arrayBuffer();
}

function SamplePlayerNode({
  positionAbsoluteX,
  positionAbsoluteY,
  data,
}: NodeProps<SamplePlayerNode>) {
  const x = `${Math.round(positionAbsoluteX)}px`;
  const y = `${Math.round(positionAbsoluteY)}px`;

  const [bufferDuration, setBufferDuration] = useState(0);
  const [loopStart, setLoopStart] = useState(0);
  const [loopEnd, setLoopEnd] = useState(0);
  const [rampDuration, setRampDuration] = useState(0);
  const [loop, setLoop] = useState(false);

  const [player, setPlayer] = useState<SingleSamplePlayer>();
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [sampleUrl, setSampleUrl] = useState<string>('./sus.wav');

  useEffect(() => {
    setErrorMessage(null);

    // First log some debug info
    console.log('Loading audio from URL:', sampleUrl);
    console.log('Current page URL:', window.location.href);

    fetchSample(sampleUrl)
      .then((arrayBuffer) => {
        console.log(
          'Fetched audio file as arrayBuffer, size:',
          arrayBuffer.byteLength
        );
        getDefaultPlayer()
          .then((player) => {
            if (!player) throw new Error('Player not initialized');
            return player.loadSample(arrayBuffer);
          })
          .then((duration) => {
            if (!duration) throw new Error('Duration is undefined');
            setBufferDuration(duration);
            setLoopStart(0);
            setLoopEnd(duration);
            setRampDuration(0);
            setLoop(false);
            setPlayer(player);
          })
          .catch((error) => {
            console.error('Error loading sample:', error);
            setErrorMessage(
              `Failed to load sample from ${sampleUrl}: ${error instanceof Error ? error.message : String(error)}`
            );
          });
      })
      .catch((error) => {
        console.error('Error fetching sample:', error);
        setErrorMessage(
          `Failed to fetch sample from ${sampleUrl}: ${error instanceof Error ? error.message : String(error)}`
        );
      });

    return () => {
      player?.dispose();
    };
  }, []);

  useEffect(() => {
    if (player) {
      player.setLoopPoint('loopStart', loopStart, rampDuration);
    }
  }, [loopStart]); // experiment: omit player and rampDuration

  useEffect(() => {
    if (player) {
      player.setLoopPoint('loopEnd', loopEnd, rampDuration);
    }
  }, [loopEnd]); // experiment: omit player and rampDuration

  useEffect(() => {
    if (player) {
      player.setLoopEnabled(loop);
    }
  }, [player, loop]);

  return (
    // We add this class to use the same styles as React Flow's default nodes.
    <div className='react-flow__node-default'>
      {data.name && <div>{data.name}</div>}

      <label className='drag-handle'>
        <p>Loop Start</p>
        <input
          className='nodrag'
          type='range'
          step='0.001'
          min='0'
          max={loopEnd}
          value={loopStart}
          onChange={(e) => {
            const value = parseFloat(e.target.value);
            setLoopStart(value);
          }}
        />
        <p>Loop End</p>
        <input
          className='nodrag'
          type='range'
          step='0.001'
          min={loopStart}
          max={bufferDuration}
          value={loopEnd}
          onChange={(e) => {
            const value = parseFloat(e.target.value);
            setLoopEnd(value);
          }}
        />
        <p>Ramp Duration</p>
        <input
          className='nodrag'
          type='range'
          min='0'
          max='1' // todo: check range
          step='0.001'
          value={rampDuration}
          onChange={(e) => {
            const value = parseFloat(e.target.value);
            setRampDuration(value);
          }}
        />
        <p>Loop</p>
        <input
          className='nodrag'
          type='checkbox'
          checked={loop}
          onChange={(e) => {
            const value = e.target.checked;
            setLoop(value);
          }}
        />
        <p>Sample URL</p>
        <input
          className='nodrag'
          type='text'
          value={defaultSampleUrl}
          onChange={(e) => {
            const value = e.target.value;
            setBufferDuration(0);
            setLoopStart(0);
            setLoopEnd(0);
            setLoop(false);
            if (!player) throw new Error('Player not initialized');
            player.loadSample(value);
          }}
        />
        <p>{}</p>
      </label>

      <div>
        {x} {y}
      </div>

      <Handle type='source' position={Position.Bottom} />
    </div>
  );
}

export default SamplePlayerNode;
