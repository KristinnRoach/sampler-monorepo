import { useState, useRef, useEffect } from 'react';
import {
  SourceNodePool,
  globalKeyboardInput,
//   SourceNode,
  ensureAudioCtx,
} from '@repo/audiolib';

const PoolTester = () => {
  const [audioCtx, setAudioCtx] = useState<AudioContext | null>(null);
  const [audioBuffer, setAudioBuffer] = useState<AudioBuffer | null>(null);
  const [isPlaying, setIsPlaying] = useState(false);

  const poolRef = useRef<SourceNodePool | null>(null);

const initAudio = async () => {
    const context = await ensureAudioCtx();
    setAudioCtx(context);
  };

  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!audioCtx || !e.target.files || e.target.files.length === 0) return;

    const file = e.target.files[0];
    const arrayBuffer = await file.arrayBuffer();
    const decodedBuffer = await audioCtx.decodeAudioData(arrayBuffer);

    setAudioBuffer(decodedBuffer);
    // setLoopEnd(decodedBuffer.duration);
  };

  useEffect(() => {
    const getAudioCtx = async () => {
      const ctx = await ensureAudioCtx();
      if (ctx) {
        setAudioCtx(ctx);
        poolRef.current = new SourceNodePool(ctx, ctx.destination);
        await poolRef.current.init();
      }
    };
    getAudioCtx();
  }, []);

  const playSound = () => {
    if (poolRef.current) {
      poolRef.current.play({
        playbackRate: 1.5,
        loopStart: 0.1,
        loopEnd: 0.5,
        loop: true,
      });
    }
  };

  return (
    <div>
      <button onClick={playSound}>Play Sound</button>
    </div>
  );
};

export default PoolTester;

// const audioContext = new AudioContext();
// const pool = new SourceNodePool(audioContext, audioContext.destination);
// await pool.init(yourAudioBuffer);

// // Play sounds with near-zero allocation overhead
// playButton.addEventListener('click', () => {
//   pool.play({
//     playbackRate: 1.5,
//     loopStart: 0.1,
//     loopEnd: 0.5,
//     loop: true
//   });
// });
